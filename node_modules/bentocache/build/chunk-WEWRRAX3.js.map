{"version":3,"sources":["../src/drivers/database/database.ts"],"sourcesContent":["import { asyncNoop, once } from '@julr/utils/functions'\n\nimport { resolveTtl } from '../../helpers.js'\nimport { BaseDriver } from '../base_driver.js'\nimport type { DatabaseConfig, CacheDriver, DatabaseAdapter } from '../../types/main.js'\n\n/**\n * A store that use a database to store cache entries\n *\n * You should provide an adapter that will handle the database interactions\n */\nexport class DatabaseDriver extends BaseDriver implements CacheDriver<true> {\n  type = 'l2' as const\n\n  /**\n   * The underlying adapter\n   */\n  #adapter: DatabaseAdapter\n\n  /**\n   * Initialize by creating the table\n   */\n  #initializer: () => Promise<any>\n\n  /**\n   * Pruning interval\n   */\n  #pruneInterval?: NodeJS.Timeout\n\n  constructor(adapter: DatabaseAdapter, config: DatabaseConfig, isNamespace = false) {\n    super(config)\n    this.#adapter = adapter\n\n    if (isNamespace) {\n      this.#initializer = asyncNoop\n      return\n    }\n\n    this.#adapter.setTableName(config.tableName || 'bentocache')\n\n    if (config.autoCreateTable !== false) {\n      this.#initializer = once(async () => await this.#adapter.createTableIfNotExists())\n    } else {\n      this.#initializer = asyncNoop\n    }\n\n    if (config.pruneInterval === false) return\n    this.#startPruneInterval(resolveTtl(config.pruneInterval)!)\n  }\n\n  /**\n   * Start the interval that will prune expired entries\n   * Maybe rework this using a node Worker ?\n   */\n  #startPruneInterval(interval: number) {\n    this.#pruneInterval = setInterval(async () => {\n      await this.#initializer()\n      await this.#adapter\n        .pruneExpiredEntries()\n        .catch((err) => console.error('[bentocache] failed to prune expired entries', err))\n    }, interval)\n  }\n\n  /**\n   * Check if the given timestamp is expired\n   */\n  #isExpired(expiration: number | null) {\n    return expiration !== null && expiration < Date.now()\n  }\n\n  /**\n   * Returns a new instance of the driver namespaced\n   */\n  namespace(namespace: string) {\n    const store = new (this.constructor as any)(\n      this.#adapter,\n      { ...this.config, prefix: this.createNamespacePrefix(namespace) },\n      true,\n    )\n\n    return store\n  }\n\n  /**\n   * Get a value from the cache\n   */\n  async get(key: string) {\n    await this.#initializer()\n\n    const result = await this.#adapter.get(this.getItemKey(key))\n    if (!result) return\n\n    if (this.#isExpired(result.expiresAt)) {\n      await this.#adapter.delete(key)\n      return\n    }\n\n    return result.value\n  }\n\n  /**\n   * Get the value of a key and delete it\n   *\n   * Returns the value if the key exists, undefined otherwise\n   */\n  async pull(key: string): Promise<string | undefined> {\n    const value = await this.get(key)\n    if (value) await this.delete(key)\n\n    return value\n  }\n\n  /**\n   * Set a value in the cache\n   * Returns true if the value was set, false otherwise\n   */\n  async set(key: string, value: any, ttl?: number) {\n    await this.#initializer()\n    await this.#adapter.set({\n      key: this.getItemKey(key),\n      value,\n      expiresAt: ttl ? new Date(Date.now() + ttl) : null,\n    })\n\n    return true\n  }\n\n  /**\n   * Remove all items from the cache\n   */\n  async clear() {\n    await this.#initializer()\n\n    await this.#adapter.clear(`${this.prefix}:`)\n  }\n\n  /**\n   * Delete a key from the cache\n   * Returns true if the key was deleted, false otherwise\n   */\n  async delete(key: string) {\n    await this.#initializer()\n    return this.#adapter.delete(this.getItemKey(key))\n  }\n\n  /**\n   * Delete multiple keys from the cache\n   */\n  async deleteMany(keys: string[]) {\n    if (keys.length === 0) return true\n    await this.#initializer()\n\n    keys = keys.map((key) => this.getItemKey(key))\n    const result = await this.#adapter.deleteMany(keys)\n\n    return result > 0\n  }\n\n  /**\n   * Disconnect from the database\n   */\n  async disconnect() {\n    if (this.#pruneInterval) {\n      clearInterval(this.#pruneInterval)\n    }\n\n    await this.#adapter.disconnect()\n  }\n}\n"],"mappings":"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","names":[]}