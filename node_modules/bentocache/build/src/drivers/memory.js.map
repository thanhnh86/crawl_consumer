{"version":3,"sources":["../../../src/drivers/memory.ts"],"sourcesContent":["import { LRUCache } from 'lru-cache'\nimport { bytes } from '@julr/utils/string/bytes'\nimport { InvalidArgumentsException } from '@poppinss/exception'\n\nimport { BaseDriver } from './base_driver.js'\nimport type {\n  CreateDriverResult,\n  L1CacheDriver,\n  MemoryConfig as MemoryConfig,\n} from '../types/main.js'\n\n/**\n * Create a new memory driver\n */\nexport function memoryDriver(options: MemoryConfig = {}): CreateDriverResult<MemoryDriver> {\n  return {\n    options,\n    factory: (config: MemoryConfig) => new MemoryDriver(config),\n  }\n}\n\n/**\n * A memory caching driver\n */\nexport class MemoryDriver extends BaseDriver implements L1CacheDriver {\n  type = 'l1' as const\n  #cache: LRUCache<string, string>\n  declare config: MemoryConfig\n\n  constructor(config: MemoryConfig & { cacheInstance?: LRUCache<string, string> } = {}) {\n    super(config)\n\n    if (config.cacheInstance) {\n      this.#cache = config.cacheInstance\n      return\n    }\n\n    if (config.serialize === false && (config.maxEntrySize || config.maxSize)) {\n      throw new InvalidArgumentsException(\n        'Cannot use maxSize or maxEntrySize when serialize is set to `false`',\n      )\n    }\n\n    this.#cache = new LRUCache({\n      max: config.maxItems ?? 1000,\n      maxEntrySize: config.maxEntrySize ? bytes.parse(config.maxEntrySize) : undefined,\n      ttlAutopurge: false,\n      ...(config.maxSize\n        ? {\n            maxSize: config.maxSize ? bytes.parse(config.maxSize) : undefined,\n            sizeCalculation: (value) => Buffer.byteLength(value, 'utf-8'),\n          }\n        : {}),\n    })\n  }\n\n  /**\n   * Returns a new instance of the driver namespaced\n   */\n  namespace(namespace: string) {\n    return new MemoryDriver({\n      ...this.config,\n      cacheInstance: this.#cache,\n      prefix: this.createNamespacePrefix(namespace),\n    })\n  }\n\n  /**\n   * Get a value from the cache\n   */\n  get(key: string) {\n    return this.#cache.get(this.getItemKey(key))\n  }\n\n  /**\n   * Get the value of a key and delete it\n   *\n   * Returns the value if the key exists, undefined otherwise\n   */\n  pull(key: string) {\n    const value = this.get(key)\n    this.delete(key)\n\n    return value\n  }\n\n  /**\n   * Put a value in the cache\n   * Returns true if the value was set, false otherwise\n   */\n  set(key: string, value: string, ttl?: number) {\n    this.#cache.set(this.getItemKey(key), value, { ttl })\n    return true\n  }\n\n  /**\n   * Returns the remaining ttl of a key\n   */\n  getRemainingTtl(key: string) {\n    return this.#cache.getRemainingTTL(this.getItemKey(key))\n  }\n\n  /**\n   * Remove all items from the cache\n   */\n  async clear() {\n    for (const key of this.#cache.keys()) {\n      if (key.startsWith(`${this.prefix}:`)) {\n        this.#cache.delete(key)\n      }\n    }\n  }\n\n  /**\n   * Delete a key from the cache\n   * Returns true if the key was deleted, false otherwise\n   */\n  delete(key: string) {\n    return this.#cache.delete(this.getItemKey(key))\n  }\n\n  /**\n   * Delete multiple keys from the cache\n   */\n  deleteMany(keys: string[]) {\n    if (keys.length === 0) return true\n    for (const key of keys) this.delete(key)\n    return true\n  }\n\n  async disconnect() {}\n}\n"],"mappings":";;;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,iCAAiC;AAYnC,SAAS,aAAa,UAAwB,CAAC,GAAqC;AACzF,SAAO;AAAA,IACL;AAAA,IACA,SAAS,CAAC,WAAyB,IAAI,aAAa,MAAM;AAAA,EAC5D;AACF;AAKO,IAAM,eAAN,MAAM,sBAAqB,WAAoC;AAAA,EACpE,OAAO;AAAA,EACP;AAAA,EAGA,YAAY,SAAsE,CAAC,GAAG;AACpF,UAAM,MAAM;AAEZ,QAAI,OAAO,eAAe;AACxB,WAAK,SAAS,OAAO;AACrB;AAAA,IACF;AAEA,QAAI,OAAO,cAAc,UAAU,OAAO,gBAAgB,OAAO,UAAU;AACzE,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,SAAS,IAAI,SAAS;AAAA,MACzB,KAAK,OAAO,YAAY;AAAA,MACxB,cAAc,OAAO,eAAe,MAAM,MAAM,OAAO,YAAY,IAAI;AAAA,MACvE,cAAc;AAAA,MACd,GAAI,OAAO,UACP;AAAA,QACE,SAAS,OAAO,UAAU,MAAM,MAAM,OAAO,OAAO,IAAI;AAAA,QACxD,iBAAiB,CAAC,UAAU,OAAO,WAAW,OAAO,OAAO;AAAA,MAC9D,IACA,CAAC;AAAA,IACP,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,WAAmB;AAC3B,WAAO,IAAI,cAAa;AAAA,MACtB,GAAG,KAAK;AAAA,MACR,eAAe,KAAK;AAAA,MACpB,QAAQ,KAAK,sBAAsB,SAAS;AAAA,IAC9C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,KAAa;AACf,WAAO,KAAK,OAAO,IAAI,KAAK,WAAW,GAAG,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,KAAa;AAChB,UAAM,QAAQ,KAAK,IAAI,GAAG;AAC1B,SAAK,OAAO,GAAG;AAEf,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAa,OAAe,KAAc;AAC5C,SAAK,OAAO,IAAI,KAAK,WAAW,GAAG,GAAG,OAAO,EAAE,IAAI,CAAC;AACpD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,KAAa;AAC3B,WAAO,KAAK,OAAO,gBAAgB,KAAK,WAAW,GAAG,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ;AACZ,eAAW,OAAO,KAAK,OAAO,KAAK,GAAG;AACpC,UAAI,IAAI,WAAW,GAAG,KAAK,MAAM,GAAG,GAAG;AACrC,aAAK,OAAO,OAAO,GAAG;AAAA,MACxB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,KAAa;AAClB,WAAO,KAAK,OAAO,OAAO,KAAK,WAAW,GAAG,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,MAAgB;AACzB,QAAI,KAAK,WAAW,EAAG,QAAO;AAC9B,eAAW,OAAO,KAAM,MAAK,OAAO,GAAG;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa;AAAA,EAAC;AACtB;","names":[]}