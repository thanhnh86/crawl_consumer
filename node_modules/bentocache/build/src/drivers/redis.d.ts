import { Redis, RedisOptions } from 'ioredis';
import { BaseDriver } from './base_driver.js';
import { CreateDriverResult, L2CacheDriver, BusOptions, CreateBusDriverResult } from '../types/main.js';
import { R as RedisConfig } from '../../drivers_options-Dm62iGEe.js';
import '@poppinss/exception';
import '../../driver-BhDh398u.js';
import '@boringnode/bus/types/main';
import '@julr/utils/logger';
import 'knex';
import 'kysely';
import '@aws-sdk/client-dynamodb';
import 'orchid-orm';

/**
 * Create a new cache redis driver
 */
declare function redisDriver(options: RedisConfig): CreateDriverResult<RedisDriver>;
/**
 * Create a new bus redis driver. It leverages the Pub/sub capabilities of Redis
 * to sending messages between your different processes.
 */
declare function redisBusDriver(options: {
    connection: RedisOptions;
} & BusOptions): CreateBusDriverResult;
/**
 * Caching driver for Redis
 */
declare class RedisDriver extends BaseDriver implements L2CacheDriver {
    #private;
    type: "l2";
    config: RedisConfig;
    constructor(config: RedisConfig);
    getConnection(): Redis;
    /**
     * Returns a new instance of the driver namespaced
     */
    namespace(namespace: string): RedisDriver;
    /**
     * Get a value from the cache
     */
    get(key: string): Promise<string | undefined>;
    /**
     * Get the value of a key and delete it
     *
     * Returns the value if the key exists, undefined otherwise
     */
    pull(key: string): Promise<string | undefined>;
    /**
     * Put a value in the cache
     * Returns true if the value was set, false otherwise
     */
    set(key: string, value: string, ttl?: number): Promise<boolean>;
    /**
     * Remove all items from the cache
     */
    clear(): Promise<void>;
    /**
     * Delete a key from the cache
     * Returns true if the key was deleted, false otherwise
     */
    delete(key: string): Promise<boolean>;
    /**
     * Delete multiple keys from the cache
     */
    deleteMany(keys: string[]): Promise<boolean>;
    /**
     * Closes the connection to the cache
     */
    disconnect(): Promise<void>;
}

export { RedisDriver, redisBusDriver, redisDriver };
