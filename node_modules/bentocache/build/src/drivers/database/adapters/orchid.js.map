{"version":3,"sources":["../../../../../src/drivers/database/adapters/orchid.ts"],"sourcesContent":["import type { DbResult, DefaultColumnTypes, DefaultSchemaConfig } from 'orchid-orm'\n\nimport { DatabaseDriver } from '../database.js'\nimport type { CreateDriverResult, DatabaseAdapter, OrchidConfig } from '../../../types/main.js'\n\n/**\n * Create a orchid driver\n */\nexport function orchidDriver(options: OrchidConfig): CreateDriverResult<DatabaseDriver> {\n  return {\n    options,\n    factory: (config: OrchidConfig) => {\n      const adapter = new OrchidAdapter(config)\n      return new DatabaseDriver(adapter, config)\n    },\n  }\n}\n\n/**\n * Orchid adapter for the DatabaseDriver\n */\nexport class OrchidAdapter implements DatabaseAdapter {\n  #connection: DbResult<DefaultColumnTypes<DefaultSchemaConfig>>\n  #tableName!: string\n\n  constructor(config: OrchidConfig) {\n    this.#connection = config.connection\n  }\n\n  private getTable() {\n    return this.#connection(this.#tableName, (t) => ({\n      key: t.varchar().primaryKey(),\n      value: t.varchar(),\n      expires_at: t\n        .timestampNoTZ()\n        .encode((value: Date) => value)\n        .parse((v: any): number => (v ? new Date(v).valueOf() : v))\n        .nullable(),\n    }))\n  }\n\n  setTableName(tableName: string): void {\n    this.#tableName = tableName\n  }\n\n  async get(key: string): Promise<{ value: string; expiresAt: number | null } | undefined> {\n    const result = await this.getTable().findByOptional({ key }).select('value', 'expires_at')\n\n    if (!result) return\n\n    return { value: result.value, expiresAt: result.expires_at }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    const count = await this.getTable().where({ key }).delete()\n    return count > 0\n  }\n\n  async deleteMany(keys: string[]): Promise<number> {\n    return await this.getTable().whereIn('key', keys).delete()\n  }\n\n  async disconnect(): Promise<void> {\n    await this.#connection.close()\n  }\n\n  async createTableIfNotExists(): Promise<void> {\n    await this.#connection.adapter.pool.query(`\n      CREATE TABLE IF NOT EXISTS \"public\".\"${this.#tableName}\" (\n        \"key\" varchar NOT NULL,\n        \"value\" text NOT NULL,\n        \"expires_at\" timestamp,\n        PRIMARY KEY (\"key\")\n      );\n    `)\n  }\n\n  async pruneExpiredEntries(): Promise<void> {\n    await this.getTable()\n      .where({ expires_at: { lt: new Date() } })\n      .delete()\n  }\n\n  async clear(prefix: string): Promise<void> {\n    await this.getTable()\n      .where({ key: { startsWith: prefix } })\n      .delete()\n  }\n\n  async set(row: { key: string; value: any; expiresAt: Date | null }): Promise<void> {\n    await this.getTable()\n      .findBy({ key: row.key })\n      .upsert({\n        create: {\n          key: row.key,\n          value: row.value,\n          expires_at: row.expiresAt,\n        },\n        update: {\n          value: row.value,\n          expires_at: row.expiresAt,\n        },\n      })\n  }\n}\n"],"mappings":";;;;;;;AAQO,SAAS,aAAa,SAA2D;AACtF,SAAO;AAAA,IACL;AAAA,IACA,SAAS,CAAC,WAAyB;AACjC,YAAM,UAAU,IAAI,cAAc,MAAM;AACxC,aAAO,IAAI,eAAe,SAAS,MAAM;AAAA,IAC3C;AAAA,EACF;AACF;AAKO,IAAM,gBAAN,MAA+C;AAAA,EACpD;AAAA,EACA;AAAA,EAEA,YAAY,QAAsB;AAChC,SAAK,cAAc,OAAO;AAAA,EAC5B;AAAA,EAEQ,WAAW;AACjB,WAAO,KAAK,YAAY,KAAK,YAAY,CAAC,OAAO;AAAA,MAC/C,KAAK,EAAE,QAAQ,EAAE,WAAW;AAAA,MAC5B,OAAO,EAAE,QAAQ;AAAA,MACjB,YAAY,EACT,cAAc,EACd,OAAO,CAAC,UAAgB,KAAK,EAC7B,MAAM,CAAC,MAAoB,IAAI,IAAI,KAAK,CAAC,EAAE,QAAQ,IAAI,CAAE,EACzD,SAAS;AAAA,IACd,EAAE;AAAA,EACJ;AAAA,EAEA,aAAa,WAAyB;AACpC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,IAAI,KAA+E;AACvF,UAAM,SAAS,MAAM,KAAK,SAAS,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,OAAO,SAAS,YAAY;AAEzF,QAAI,CAAC,OAAQ;AAEb,WAAO,EAAE,OAAO,OAAO,OAAO,WAAW,OAAO,WAAW;AAAA,EAC7D;AAAA,EAEA,MAAM,OAAO,KAA+B;AAC1C,UAAM,QAAQ,MAAM,KAAK,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,OAAO;AAC1D,WAAO,QAAQ;AAAA,EACjB;AAAA,EAEA,MAAM,WAAW,MAAiC;AAChD,WAAO,MAAM,KAAK,SAAS,EAAE,QAAQ,OAAO,IAAI,EAAE,OAAO;AAAA,EAC3D;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,KAAK,YAAY,MAAM;AAAA,EAC/B;AAAA,EAEA,MAAM,yBAAwC;AAC5C,UAAM,KAAK,YAAY,QAAQ,KAAK,MAAM;AAAA,6CACD,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMvD;AAAA,EACH;AAAA,EAEA,MAAM,sBAAqC;AACzC,UAAM,KAAK,SAAS,EACjB,MAAM,EAAE,YAAY,EAAE,IAAI,oBAAI,KAAK,EAAE,EAAE,CAAC,EACxC,OAAO;AAAA,EACZ;AAAA,EAEA,MAAM,MAAM,QAA+B;AACzC,UAAM,KAAK,SAAS,EACjB,MAAM,EAAE,KAAK,EAAE,YAAY,OAAO,EAAE,CAAC,EACrC,OAAO;AAAA,EACZ;AAAA,EAEA,MAAM,IAAI,KAAyE;AACjF,UAAM,KAAK,SAAS,EACjB,OAAO,EAAE,KAAK,IAAI,IAAI,CAAC,EACvB,OAAO;AAAA,MACN,QAAQ;AAAA,QACN,KAAK,IAAI;AAAA,QACT,OAAO,IAAI;AAAA,QACX,YAAY,IAAI;AAAA,MAClB;AAAA,MACA,QAAQ;AAAA,QACN,OAAO,IAAI;AAAA,QACX,YAAY,IAAI;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACL;AACF;","names":[]}