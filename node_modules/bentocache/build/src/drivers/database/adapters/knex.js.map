{"version":3,"sources":["../../../../../src/drivers/database/adapters/knex.ts"],"sourcesContent":["import type { Knex } from 'knex'\n\nimport { DatabaseDriver } from '../database.js'\nimport type { CreateDriverResult, DatabaseAdapter, KnexConfig } from '../../../types/main.js'\n\n/**\n * Create a knex driver\n * You will need to install the underlying database package (mysql2, pg, sqlite3, etc)\n */\nexport function knexDriver(options: KnexConfig): CreateDriverResult<DatabaseDriver> {\n  return {\n    options,\n    factory: (config: KnexConfig) => {\n      const adapter = new KnexAdapter(config)\n      return new DatabaseDriver(adapter, config)\n    },\n  }\n}\n\n/**\n * Knex adapter for the DatabaseDriver\n */\nexport class KnexAdapter implements DatabaseAdapter {\n  #connection: Knex\n  #tableName!: string\n\n  constructor(config: KnexConfig) {\n    this.#connection = config.connection\n  }\n\n  setTableName(tableName: string): void {\n    this.#tableName = tableName\n  }\n\n  async get(key: string): Promise<{ value: string; expiresAt: number | null } | undefined> {\n    const result = await this.#connection\n      .from(this.#tableName)\n      .select(['value', 'expires_at'])\n      .where('key', key)\n      .first()\n\n    if (!result) return\n\n    return { value: result.value, expiresAt: result.expires_at }\n  }\n\n  async delete(key: string): Promise<boolean> {\n    const result = await this.#connection.from(this.#tableName).where('key', key).delete()\n    return result > 0\n  }\n\n  async deleteMany(keys: string[]): Promise<number> {\n    return await this.#connection.from(this.#tableName).whereIn('key', keys).delete()\n  }\n\n  async disconnect(): Promise<void> {\n    await this.#connection.destroy()\n  }\n\n  async createTableIfNotExists(): Promise<void> {\n    const hasTable = await this.#connection.schema.hasTable(this.#tableName)\n    if (hasTable) return\n\n    await this.#connection.schema.createTable(this.#tableName, (table) => {\n      table.string('key', 255).notNullable().primary()\n      table.text('value', 'longtext')\n      table.timestamp('expires_at').nullable()\n    })\n  }\n\n  async pruneExpiredEntries(): Promise<void> {\n    await this.#connection.from(this.#tableName).where('expires_at', '<', new Date()).delete()\n  }\n\n  async clear(prefix: string): Promise<void> {\n    await this.#connection.from(this.#tableName).where('key', 'like', `${prefix}%`).delete()\n  }\n\n  async set(row: { key: string; value: any; expiresAt: Date | null }): Promise<void> {\n    await this.#connection\n      .from(this.#tableName)\n      .insert({ key: row.key, value: row.value, expires_at: row.expiresAt })\n      .onConflict('key')\n      .merge(['value', 'expires_at'])\n  }\n}\n"],"mappings":";;;;;;;AASO,SAAS,WAAW,SAAyD;AAClF,SAAO;AAAA,IACL;AAAA,IACA,SAAS,CAAC,WAAuB;AAC/B,YAAM,UAAU,IAAI,YAAY,MAAM;AACtC,aAAO,IAAI,eAAe,SAAS,MAAM;AAAA,IAC3C;AAAA,EACF;AACF;AAKO,IAAM,cAAN,MAA6C;AAAA,EAClD;AAAA,EACA;AAAA,EAEA,YAAY,QAAoB;AAC9B,SAAK,cAAc,OAAO;AAAA,EAC5B;AAAA,EAEA,aAAa,WAAyB;AACpC,SAAK,aAAa;AAAA,EACpB;AAAA,EAEA,MAAM,IAAI,KAA+E;AACvF,UAAM,SAAS,MAAM,KAAK,YACvB,KAAK,KAAK,UAAU,EACpB,OAAO,CAAC,SAAS,YAAY,CAAC,EAC9B,MAAM,OAAO,GAAG,EAChB,MAAM;AAET,QAAI,CAAC,OAAQ;AAEb,WAAO,EAAE,OAAO,OAAO,OAAO,WAAW,OAAO,WAAW;AAAA,EAC7D;AAAA,EAEA,MAAM,OAAO,KAA+B;AAC1C,UAAM,SAAS,MAAM,KAAK,YAAY,KAAK,KAAK,UAAU,EAAE,MAAM,OAAO,GAAG,EAAE,OAAO;AACrF,WAAO,SAAS;AAAA,EAClB;AAAA,EAEA,MAAM,WAAW,MAAiC;AAChD,WAAO,MAAM,KAAK,YAAY,KAAK,KAAK,UAAU,EAAE,QAAQ,OAAO,IAAI,EAAE,OAAO;AAAA,EAClF;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,KAAK,YAAY,QAAQ;AAAA,EACjC;AAAA,EAEA,MAAM,yBAAwC;AAC5C,UAAM,WAAW,MAAM,KAAK,YAAY,OAAO,SAAS,KAAK,UAAU;AACvE,QAAI,SAAU;AAEd,UAAM,KAAK,YAAY,OAAO,YAAY,KAAK,YAAY,CAAC,UAAU;AACpE,YAAM,OAAO,OAAO,GAAG,EAAE,YAAY,EAAE,QAAQ;AAC/C,YAAM,KAAK,SAAS,UAAU;AAC9B,YAAM,UAAU,YAAY,EAAE,SAAS;AAAA,IACzC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,sBAAqC;AACzC,UAAM,KAAK,YAAY,KAAK,KAAK,UAAU,EAAE,MAAM,cAAc,KAAK,oBAAI,KAAK,CAAC,EAAE,OAAO;AAAA,EAC3F;AAAA,EAEA,MAAM,MAAM,QAA+B;AACzC,UAAM,KAAK,YAAY,KAAK,KAAK,UAAU,EAAE,MAAM,OAAO,QAAQ,GAAG,MAAM,GAAG,EAAE,OAAO;AAAA,EACzF;AAAA,EAEA,MAAM,IAAI,KAAyE;AACjF,UAAM,KAAK,YACR,KAAK,KAAK,UAAU,EACpB,OAAO,EAAE,KAAK,IAAI,KAAK,OAAO,IAAI,OAAO,YAAY,IAAI,UAAU,CAAC,EACpE,WAAW,KAAK,EAChB,MAAM,CAAC,SAAS,YAAY,CAAC;AAAA,EAClC;AACF;","names":[]}