{"version":3,"sources":["../src/helpers.ts"],"sourcesContent":["import { ms } from '@julr/utils/string/ms'\n\nimport type { Duration } from './types/main.js'\n\n/**\n * Resolve a TTL value to a number in milliseconds\n */\nexport function resolveTtl(ttl?: Duration, defaultTtl: Duration = 30_000) {\n  if (typeof ttl === 'number') return ttl\n\n  /**\n   * If the TTL is null, it means the value should never expire\n   */\n  if (ttl === null) {\n    return undefined\n  }\n\n  if (ttl === undefined) {\n    if (typeof defaultTtl === 'number') return defaultTtl\n    if (typeof defaultTtl === 'string') return ms.parse(defaultTtl)\n\n    return undefined\n  }\n\n  return ms.parse(ttl)\n}\n\n/**\n * Stolen from https://github.com/lukeed/hexoid/blob/main/src/index.js\n * Trying to avoid the dependency on hexoid as it publishes a dual-format package.\n */\nlet IDX = 256\nconst HEX: string[] = []\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1)\n\nexport function hexoid(len?: number) {\n  len = len || 16\n  let str = ''\n  let num = 0\n  return function () {\n    if (!str || num === 256) {\n      str = ''\n      num = ((1 + len) / 2) | 0\n      while (num--) str += HEX[(256 * Math.random()) | 0]\n      str = str.substring((num = 0), len - 2)\n    }\n    return str + HEX[num++]\n  }\n}\n"],"mappings":";AAAA,SAAS,UAAU;AAOZ,SAAS,WAAW,KAAgB,aAAuB,KAAQ;AACxE,MAAI,OAAO,QAAQ,SAAU,QAAO;AAKpC,MAAI,QAAQ,MAAM;AAChB,WAAO;AAAA,EACT;AAEA,MAAI,QAAQ,QAAW;AACrB,QAAI,OAAO,eAAe,SAAU,QAAO;AAC3C,QAAI,OAAO,eAAe,SAAU,QAAO,GAAG,MAAM,UAAU;AAE9D,WAAO;AAAA,EACT;AAEA,SAAO,GAAG,MAAM,GAAG;AACrB;AAMA,IAAI,MAAM;AACV,IAAM,MAAgB,CAAC;AACvB,OAAO,MAAO,KAAI,GAAG,KAAK,MAAM,KAAK,SAAS,EAAE,EAAE,UAAU,CAAC;AAEtD,SAAS,OAAO,KAAc;AACnC,QAAM,OAAO;AACb,MAAI,MAAM;AACV,MAAI,MAAM;AACV,SAAO,WAAY;AACjB,QAAI,CAAC,OAAO,QAAQ,KAAK;AACvB,YAAM;AACN,aAAQ,IAAI,OAAO,IAAK;AACxB,aAAO,MAAO,QAAO,IAAK,MAAM,KAAK,OAAO,IAAK,CAAC;AAClD,YAAM,IAAI,UAAW,MAAM,GAAI,MAAM,CAAC;AAAA,IACxC;AACA,WAAO,MAAM,IAAI,KAAK;AAAA,EACxB;AACF;","names":[]}