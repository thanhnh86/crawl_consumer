{"version":3,"sources":["../../test_helpers/chaos_injector.ts","../../test_helpers/chaos_transport.ts"],"sourcesContent":["/**\n * @boringnode/bus\n *\n * @license MIT\n * @copyright BoringNode\n */\n\nimport { setTimeout } from 'node:timers/promises'\n\nexport class ChaosInjector {\n  /**\n   * Probability of throwing an error\n   */\n  #throwProbability = 0\n\n  /**\n   * Minimum delay in milliseconds\n   */\n  #minDelay = 0\n\n  /**\n   * Maximum delay in milliseconds\n   */\n  #maxDelay = 0\n\n  /**\n   * Randomly throw an error with the given probability\n   */\n  injectExceptions() {\n    if (Math.random() < this.#throwProbability) {\n      throw new Error('Chaos: Random error')\n    }\n  }\n\n  /**\n   * Apply a random delay between minDelay and maxDelay\n   */\n  async injectDelay() {\n    const delay = this.#minDelay + Math.random() * (this.#maxDelay - this.#minDelay)\n    await setTimeout(delay)\n  }\n\n  /**\n   * Apply some chaos : delay and/or throw an error\n   */\n  async injectChaos() {\n    await this.injectDelay()\n    this.injectExceptions()\n  }\n\n  /**\n   * Make the cache always throw an error\n   */\n  alwaysThrow() {\n    this.#throwProbability = 1\n    return this\n  }\n\n  /**\n   * Reset the throw probability to 0\n   */\n  neverThrow() {\n    this.#throwProbability = 0\n    return this\n  }\n\n  /**\n   * Always apply the given delay\n   */\n  alwaysDelay(minDelay: number, maxDelay: number) {\n    this.#minDelay = minDelay\n    this.#maxDelay = maxDelay\n    return this\n  }\n}\n","/**\n * @boringnode/bus\n *\n * @license MIT\n * @copyright BoringNode\n */\n\nimport { ChaosInjector } from './chaos_injector.js'\nimport type { Transport, Serializable, SubscribeHandler } from '../src/types/main.js'\n\nexport class ChaosTransport implements Transport {\n  /**\n   * The inner transport that is wrapped\n   */\n  readonly #innerTransport: Transport\n\n  /**\n   * Reference to the chaos injector\n   */\n  #chaosInjector: ChaosInjector\n\n  constructor(innerTransport: Transport) {\n    this.#innerTransport = innerTransport\n    this.#chaosInjector = new ChaosInjector()\n  }\n\n  setId(id: string) {\n    this.#innerTransport.setId(id)\n\n    return this.#innerTransport\n  }\n\n  getInnerTransport<T extends Transport>(): T {\n    return this.#innerTransport as T\n  }\n\n  /**\n   * Make the cache always throw an error\n   */\n  alwaysThrow() {\n    this.#chaosInjector.alwaysThrow()\n    return this\n  }\n\n  /**\n   * Reset the cache to never throw an error\n   */\n  neverThrow() {\n    this.#chaosInjector.neverThrow()\n    return this\n  }\n\n  async publish(channel: string, message: Serializable) {\n    await this.#chaosInjector.injectChaos()\n    return this.#innerTransport.publish(channel, message)\n  }\n\n  async subscribe<T extends Serializable>(channel: string, handler: SubscribeHandler<T>) {\n    return this.#innerTransport.subscribe(channel, handler)\n  }\n\n  unsubscribe(channel: string) {\n    return this.#innerTransport.unsubscribe(channel)\n  }\n\n  disconnect() {\n    return this.#innerTransport.disconnect()\n  }\n\n  onReconnect(_callback: () => void): void {}\n}\n"],"mappings":";AAOA,SAAS,kBAAkB;AAEpB,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA,EAIzB,oBAAoB;AAAA;AAAA;AAAA;AAAA,EAKpB,YAAY;AAAA;AAAA;AAAA;AAAA,EAKZ,YAAY;AAAA;AAAA;AAAA;AAAA,EAKZ,mBAAmB;AACjB,QAAI,KAAK,OAAO,IAAI,KAAK,mBAAmB;AAC1C,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc;AAClB,UAAM,QAAQ,KAAK,YAAY,KAAK,OAAO,KAAK,KAAK,YAAY,KAAK;AACtE,UAAM,WAAW,KAAK;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc;AAClB,UAAM,KAAK,YAAY;AACvB,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACZ,SAAK,oBAAoB;AACzB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACX,SAAK,oBAAoB;AACzB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAkB,UAAkB;AAC9C,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,WAAO;AAAA,EACT;AACF;;;AChEO,IAAM,iBAAN,MAA0C;AAAA;AAAA;AAAA;AAAA,EAItC;AAAA;AAAA;AAAA;AAAA,EAKT;AAAA,EAEA,YAAY,gBAA2B;AACrC,SAAK,kBAAkB;AACvB,SAAK,iBAAiB,IAAI,cAAc;AAAA,EAC1C;AAAA,EAEA,MAAM,IAAY;AAChB,SAAK,gBAAgB,MAAM,EAAE;AAE7B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,oBAA4C;AAC1C,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACZ,SAAK,eAAe,YAAY;AAChC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACX,SAAK,eAAe,WAAW;AAC/B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAQ,SAAiB,SAAuB;AACpD,UAAM,KAAK,eAAe,YAAY;AACtC,WAAO,KAAK,gBAAgB,QAAQ,SAAS,OAAO;AAAA,EACtD;AAAA,EAEA,MAAM,UAAkC,SAAiB,SAA8B;AACrF,WAAO,KAAK,gBAAgB,UAAU,SAAS,OAAO;AAAA,EACxD;AAAA,EAEA,YAAY,SAAiB;AAC3B,WAAO,KAAK,gBAAgB,YAAY,OAAO;AAAA,EACjD;AAAA,EAEA,aAAa;AACX,WAAO,KAAK,gBAAgB,WAAW;AAAA,EACzC;AAAA,EAEA,YAAY,WAA6B;AAAA,EAAC;AAC5C;","names":[]}