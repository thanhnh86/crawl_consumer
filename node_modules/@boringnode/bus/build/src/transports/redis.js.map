{"version":3,"sources":["../../../src/transports/redis.ts"],"sourcesContent":["/**\n * @boringnode/bus\n *\n * @license MIT\n * @copyright BoringNode\n */\n\nimport { Redis } from 'ioredis'\nimport { assert } from '@poppinss/utils/assert'\n\nimport debug from '../debug.js'\nimport { JsonEncoder } from '../encoders/json_encoder.js'\nimport type {\n  Transport,\n  TransportEncoder,\n  TransportMessage,\n  Serializable,\n  SubscribeHandler,\n  RedisTransportConfig,\n} from '../types/main.js'\n\nexport function redis(config: RedisTransportConfig, encoder?: TransportEncoder) {\n  return () => new RedisTransport(config, encoder)\n}\n\nexport class RedisTransport implements Transport {\n  readonly #publisher: Redis\n  readonly #subscriber: Redis\n  readonly #encoder: TransportEncoder\n  readonly #useMessageBuffer: boolean = false\n\n  #id: string | undefined\n\n  constructor(path: string, encoder?: TransportEncoder)\n  constructor(options: RedisTransportConfig, encoder?: TransportEncoder)\n  constructor(options: RedisTransportConfig | string, encoder?: TransportEncoder) {\n    // @ts-expect-error - merged definitions of overloaded constructor is not public\n    this.#publisher = new Redis(options)\n    // @ts-expect-error - merged definitions of overloaded constructor is not public\n    this.#subscriber = new Redis(options)\n    this.#encoder = encoder ?? new JsonEncoder()\n\n    if (typeof options === 'object') {\n      this.#useMessageBuffer = options.useMessageBuffer ?? false\n    }\n  }\n\n  setId(id: string): Transport {\n    this.#id = id\n\n    return this\n  }\n\n  async disconnect(): Promise<void> {\n    await Promise.all([this.#publisher.quit(), this.#subscriber.quit()])\n  }\n\n  async publish(channel: string, message: Serializable): Promise<void> {\n    assert(this.#id, 'You must set an id before publishing a message')\n\n    const encoded = this.#encoder.encode({ payload: message, busId: this.#id })\n\n    await this.#publisher.publish(channel, encoded)\n  }\n\n  async subscribe<T extends Serializable>(\n    channel: string,\n    handler: SubscribeHandler<T>\n  ): Promise<void> {\n    this.#subscriber.subscribe(channel, (err) => {\n      if (err) {\n        throw err\n      }\n    })\n\n    const event = this.#useMessageBuffer ? 'messageBuffer' : 'message'\n    this.#subscriber.on(event, (receivedChannel: Buffer | string, message: Buffer | string) => {\n      receivedChannel = receivedChannel.toString()\n\n      if (channel !== receivedChannel) return\n\n      debug('received message for channel \"%s\"', channel)\n\n      const data = this.#encoder.decode<TransportMessage<T>>(message)\n\n      /**\n       * Ignore messages published by this bus instance\n       */\n      if (data.busId === this.#id) {\n        debug('ignoring message published by the same bus instance')\n        return\n      }\n\n      // @ts-expect-error - TODO: Weird typing issue\n      handler(data.payload)\n    })\n  }\n\n  onReconnect(callback: () => void): void {\n    this.#subscriber.on('reconnecting', callback)\n  }\n\n  async unsubscribe(channel: string): Promise<void> {\n    await this.#subscriber.unsubscribe(channel)\n  }\n}\n"],"mappings":";;;;;;;;AAOA,SAAS,aAAa;AACtB,SAAS,cAAc;AAahB,SAAS,MAAM,QAA8B,SAA4B;AAC9E,SAAO,MAAM,IAAI,eAAe,QAAQ,OAAO;AACjD;AAEO,IAAM,iBAAN,MAA0C;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA,oBAA6B;AAAA,EAEtC;AAAA,EAIA,YAAY,SAAwC,SAA4B;AAE9E,SAAK,aAAa,IAAI,MAAM,OAAO;AAEnC,SAAK,cAAc,IAAI,MAAM,OAAO;AACpC,SAAK,WAAW,WAAW,IAAI,YAAY;AAE3C,QAAI,OAAO,YAAY,UAAU;AAC/B,WAAK,oBAAoB,QAAQ,oBAAoB;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,MAAM,IAAuB;AAC3B,SAAK,MAAM;AAEX,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,QAAQ,IAAI,CAAC,KAAK,WAAW,KAAK,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC;AAAA,EACrE;AAAA,EAEA,MAAM,QAAQ,SAAiB,SAAsC;AACnE,WAAO,KAAK,KAAK,gDAAgD;AAEjE,UAAM,UAAU,KAAK,SAAS,OAAO,EAAE,SAAS,SAAS,OAAO,KAAK,IAAI,CAAC;AAE1E,UAAM,KAAK,WAAW,QAAQ,SAAS,OAAO;AAAA,EAChD;AAAA,EAEA,MAAM,UACJ,SACA,SACe;AACf,SAAK,YAAY,UAAU,SAAS,CAAC,QAAQ;AAC3C,UAAI,KAAK;AACP,cAAM;AAAA,MACR;AAAA,IACF,CAAC;AAED,UAAM,QAAQ,KAAK,oBAAoB,kBAAkB;AACzD,SAAK,YAAY,GAAG,OAAO,CAAC,iBAAkC,YAA6B;AACzF,wBAAkB,gBAAgB,SAAS;AAE3C,UAAI,YAAY,gBAAiB;AAEjC,oBAAM,qCAAqC,OAAO;AAElD,YAAM,OAAO,KAAK,SAAS,OAA4B,OAAO;AAK9D,UAAI,KAAK,UAAU,KAAK,KAAK;AAC3B,sBAAM,qDAAqD;AAC3D;AAAA,MACF;AAGA,cAAQ,KAAK,OAAO;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,YAAY,UAA4B;AACtC,SAAK,YAAY,GAAG,gBAAgB,QAAQ;AAAA,EAC9C;AAAA,EAEA,MAAM,YAAY,SAAgC;AAChD,UAAM,KAAK,YAAY,YAAY,OAAO;AAAA,EAC5C;AACF;","names":[]}