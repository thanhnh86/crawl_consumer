{"version":3,"sources":["../../../src/transports/mqtt.ts"],"sourcesContent":["/**\n * @boringnode/bus\n *\n * @license MIT\n * @copyright BoringNode\n */\n\nimport { connect, MqttClient } from 'mqtt'\nimport { assert } from '@poppinss/utils/assert'\n\nimport debug from '../debug.js'\nimport {\n  Transport,\n  TransportEncoder,\n  TransportMessage,\n  Serializable,\n  SubscribeHandler,\n  MqttProtocol,\n  MqttTransportConfig,\n} from '../types/main.js'\nimport { JsonEncoder } from '../encoders/json_encoder.js'\n\nexport function mqtt(config: MqttTransportConfig, encoder?: TransportEncoder) {\n  return () => new MqttTransport(config, encoder)\n}\n\nexport class MqttTransport implements Transport {\n  #id: string | undefined\n  #client: MqttClient\n  #url: string\n  readonly #encoder: TransportEncoder\n\n  constructor(config: MqttTransportConfig, encoder?: TransportEncoder) {\n    this.#encoder = encoder ?? new JsonEncoder()\n    this.#url = `${config.protocol || MqttProtocol.MQTT}://${config.host}${config.port ? `:${config.port}` : ''}`\n\n    this.#client = connect(this.#url, config.options ?? {})\n  }\n\n  setId(id: string): Transport {\n    this.#id = id\n\n    return this\n  }\n\n  async disconnect(): Promise<void> {\n    await this.#client.endAsync()\n  }\n\n  async publish(channel: string, message: any): Promise<void> {\n    assert(this.#id, 'You must set an id before publishing a message')\n\n    const encoded = this.#encoder.encode({ payload: message, busId: this.#id })\n\n    await this.#client.publishAsync(channel, encoded)\n  }\n\n  async subscribe<T extends Serializable>(\n    channel: string,\n    handler: SubscribeHandler<T>\n  ): Promise<void> {\n    this.#client.subscribe(channel, (err) => {\n      if (err) {\n        throw err\n      }\n    })\n\n    this.#client.on('message', (receivedChannel: string, message: Buffer | string) => {\n      if (channel !== receivedChannel) return\n\n      debug('received message for channel \"%s\"', channel)\n\n      const data = this.#encoder.decode<TransportMessage<T>>(message)\n\n      /**\n       * Ignore messages published by this bus instance\n       */\n      if (data.busId === this.#id) {\n        debug('ignoring message published by the same bus instance')\n        return\n      }\n\n      // @ts-expect-error - TODO: Weird typing issue\n      handler(data.payload)\n    })\n  }\n\n  onReconnect(): void {\n    this.#client.reconnect()\n  }\n\n  async unsubscribe(channel: string): Promise<void> {\n    await this.#client.unsubscribeAsync(channel)\n  }\n}\n"],"mappings":";;;;;;;;;AAOA,SAAS,eAA2B;AACpC,SAAS,cAAc;AAchB,SAAS,KAAK,QAA6B,SAA4B;AAC5E,SAAO,MAAM,IAAI,cAAc,QAAQ,OAAO;AAChD;AAEO,IAAM,gBAAN,MAAyC;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACS;AAAA,EAET,YAAY,QAA6B,SAA4B;AACnE,SAAK,WAAW,WAAW,IAAI,YAAY;AAC3C,SAAK,OAAO,GAAG,OAAO,6BAA6B,MAAM,OAAO,IAAI,GAAG,OAAO,OAAO,IAAI,OAAO,IAAI,KAAK,EAAE;AAE3G,SAAK,UAAU,QAAQ,KAAK,MAAM,OAAO,WAAW,CAAC,CAAC;AAAA,EACxD;AAAA,EAEA,MAAM,IAAuB;AAC3B,SAAK,MAAM;AAEX,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAA4B;AAChC,UAAM,KAAK,QAAQ,SAAS;AAAA,EAC9B;AAAA,EAEA,MAAM,QAAQ,SAAiB,SAA6B;AAC1D,WAAO,KAAK,KAAK,gDAAgD;AAEjE,UAAM,UAAU,KAAK,SAAS,OAAO,EAAE,SAAS,SAAS,OAAO,KAAK,IAAI,CAAC;AAE1E,UAAM,KAAK,QAAQ,aAAa,SAAS,OAAO;AAAA,EAClD;AAAA,EAEA,MAAM,UACJ,SACA,SACe;AACf,SAAK,QAAQ,UAAU,SAAS,CAAC,QAAQ;AACvC,UAAI,KAAK;AACP,cAAM;AAAA,MACR;AAAA,IACF,CAAC;AAED,SAAK,QAAQ,GAAG,WAAW,CAAC,iBAAyB,YAA6B;AAChF,UAAI,YAAY,gBAAiB;AAEjC,oBAAM,qCAAqC,OAAO;AAElD,YAAM,OAAO,KAAK,SAAS,OAA4B,OAAO;AAK9D,UAAI,KAAK,UAAU,KAAK,KAAK;AAC3B,sBAAM,qDAAqD;AAC3D;AAAA,MACF;AAGA,cAAQ,KAAK,OAAO;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,cAAoB;AAClB,SAAK,QAAQ,UAAU;AAAA,EACzB;AAAA,EAEA,MAAM,YAAY,SAAgC;AAChD,UAAM,KAAK,QAAQ,iBAAiB,OAAO;AAAA,EAC7C;AACF;","names":[]}