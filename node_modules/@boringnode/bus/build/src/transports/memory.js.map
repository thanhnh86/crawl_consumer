{"version":3,"sources":["../../../src/transports/memory.ts"],"sourcesContent":["/**\n * @boringnode/bus\n *\n * @license MIT\n * @copyright BoringNode\n */\n\nimport type { Transport, Serializable, SubscribeHandler } from '../types/main.js'\n\nexport function memory() {\n  return () => new MemoryTransport()\n}\n\nexport class MemoryTransport implements Transport {\n  #id!: string\n\n  /**\n   * A Map that stores the subscriptions for each channel.\n   */\n  static #subscriptions: Map<\n    string,\n    Array<{\n      handler: SubscribeHandler<any>\n      busId: string\n    }>\n  > = new Map()\n\n  setId(id: string) {\n    this.#id = id\n\n    return this\n  }\n\n  /**\n   * List of messages received by this bus\n   */\n  receivedMessages: any[] = []\n\n  async publish(channel: string, message: Serializable) {\n    const handlers = MemoryTransport.#subscriptions.get(channel)\n\n    if (!handlers) {\n      return\n    }\n\n    for (const { handler, busId } of handlers) {\n      if (busId === this.#id) continue\n\n      handler(message)\n    }\n  }\n\n  async subscribe<T extends Serializable>(channel: string, handler: SubscribeHandler<T>) {\n    const handlers = MemoryTransport.#subscriptions.get(channel) || []\n\n    handlers.push({ handler: this.#wrapHandler(handler), busId: this.#id })\n\n    MemoryTransport.#subscriptions.set(channel, handlers)\n  }\n\n  async unsubscribe(channel: string) {\n    const handlers = MemoryTransport.#subscriptions.get(channel) || []\n\n    MemoryTransport.#subscriptions.set(\n      channel,\n      handlers.filter((h) => h.busId !== this.#id)\n    )\n  }\n\n  async disconnect() {\n    MemoryTransport.#subscriptions.clear()\n  }\n\n  onReconnect(_callback: () => void) {}\n\n  #wrapHandler(handler: SubscribeHandler<any>) {\n    return (message: any) => {\n      this.receivedMessages.push(message)\n      handler(message)\n    }\n  }\n}\n"],"mappings":";AASO,SAAS,SAAS;AACvB,SAAO,MAAM,IAAI,gBAAgB;AACnC;AAEO,IAAM,kBAAN,MAAM,iBAAqC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,iBAMH,oBAAI,IAAI;AAAA,EAEZ,MAAM,IAAY;AAChB,SAAK,MAAM;AAEX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,mBAA0B,CAAC;AAAA,EAE3B,MAAM,QAAQ,SAAiB,SAAuB;AACpD,UAAM,WAAW,iBAAgB,eAAe,IAAI,OAAO;AAE3D,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AAEA,eAAW,EAAE,SAAS,MAAM,KAAK,UAAU;AACzC,UAAI,UAAU,KAAK,IAAK;AAExB,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,MAAM,UAAkC,SAAiB,SAA8B;AACrF,UAAM,WAAW,iBAAgB,eAAe,IAAI,OAAO,KAAK,CAAC;AAEjE,aAAS,KAAK,EAAE,SAAS,KAAK,aAAa,OAAO,GAAG,OAAO,KAAK,IAAI,CAAC;AAEtE,qBAAgB,eAAe,IAAI,SAAS,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAM,YAAY,SAAiB;AACjC,UAAM,WAAW,iBAAgB,eAAe,IAAI,OAAO,KAAK,CAAC;AAEjE,qBAAgB,eAAe;AAAA,MAC7B;AAAA,MACA,SAAS,OAAO,CAAC,MAAM,EAAE,UAAU,KAAK,GAAG;AAAA,IAC7C;AAAA,EACF;AAAA,EAEA,MAAM,aAAa;AACjB,qBAAgB,eAAe,MAAM;AAAA,EACvC;AAAA,EAEA,YAAY,WAAuB;AAAA,EAAC;AAAA,EAEpC,aAAa,SAAgC;AAC3C,WAAO,CAAC,YAAiB;AACvB,WAAK,iBAAiB,KAAK,OAAO;AAClC,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF;AACF;","names":[]}