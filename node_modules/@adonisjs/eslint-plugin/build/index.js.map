{"version":3,"sources":["../src/rules/prefer_lazy_listener_import.ts","../src/utils.ts","../src/rules/prefer_lazy_controller_import.ts","../index.ts"],"sourcesContent":["/*\n * @adonisjs/eslint-plugin\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { AST_NODE_TYPES, TSESTree } from '@typescript-eslint/utils'\nimport { createEslintRule } from '../utils.js'\n\n/**\n * ESLint rule to force lazy listener imports\n */\nexport default createEslintRule({\n  name: 'prefer-lazy-listener-import',\n  defaultOptions: [],\n  meta: {\n    type: 'problem',\n    fixable: 'code',\n    docs: {\n      description: '(Needed for HMR) Prefer lazy listener import over standard import',\n    },\n    schema: [],\n    messages: {\n      preferLazyListenerImport: 'Replace standard import with lazy listener import',\n    },\n  },\n\n  create: function (context) {\n    const importNodes: Record<string, TSESTree.ImportDeclaration> = {}\n    const importIdentifiers: string[] = []\n    let emitterIdentifier: string = ''\n\n    function isEmitterOnCallExpression(node: TSESTree.CallExpression, routerIdentifier: string) {\n      return (\n        node.callee.type === AST_NODE_TYPES.MemberExpression &&\n        node.callee.object.type === AST_NODE_TYPES.Identifier &&\n        node.callee.object.name === routerIdentifier &&\n        node.callee.property.type === AST_NODE_TYPES.Identifier &&\n        node.callee.property.name === 'on'\n      )\n    }\n\n    return {\n      /**\n       * Track all imported identifiers\n       * Also get the local name of the emitter import\n       */\n      ImportDeclaration(node) {\n        for (const specifier of node.specifiers) {\n          if (specifier.type === 'ImportDefaultSpecifier' || specifier.type === 'ImportSpecifier') {\n            importIdentifiers.push(specifier.local.name)\n            importNodes[specifier.local.name] = node\n          }\n        }\n\n        if (node.source.value === '@adonisjs/core/services/emitter') {\n          if (node.specifiers[0] && node.specifiers[0].type === 'ImportDefaultSpecifier') {\n            emitterIdentifier = node.specifiers[0].local.name\n          }\n        }\n      },\n\n      CallExpression(node) {\n        /**\n         * Check if we are calling emitter.on()\n         */\n        if (!isEmitterOnCallExpression(node, emitterIdentifier)) {\n          return\n        }\n\n        /**\n         * Ensure the second argument is an array\n         */\n        const secondArgument = node.arguments[1]\n        if (secondArgument.type !== AST_NODE_TYPES.ArrayExpression) {\n          return\n        }\n\n        for (const element of secondArgument.elements) {\n          if (!element) {\n            continue\n          }\n\n          /**\n           * If we are dealing with an Identifier that was imported\n           * through a standard import, then report it as an error\n           */\n          if (element.type !== 'Identifier' || !importIdentifiers.includes(element.name)) {\n            continue\n          }\n\n          context.report({\n            node: importNodes[element.name],\n            messageId: 'preferLazyListenerImport',\n            fix(fixer) {\n              const importPath = importNodes[element.name].source.raw\n              const newImportDeclaration = `const ${element.name} = () => import(${importPath})`\n              return fixer.replaceText(importNodes[element.name], newImportDeclaration)\n            },\n          })\n        }\n      },\n    }\n  },\n})\n","/*\n * @adonisjs/eslint-plugin\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ESLintUtils } from '@typescript-eslint/utils'\n\nexport const createEslintRule = ESLintUtils.RuleCreator<{\n  description: string\n}>((ruleName) => `https://github.com/adonisjs/eslint-plugin-adonisjs#${ruleName}`)\n","/*\n * @adonisjs/eslint-plugin\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { AST_NODE_TYPES, TSESTree } from '@typescript-eslint/utils'\nimport { createEslintRule } from '../utils.js'\n\nconst HTTP_METHODS = ['get', 'post', 'put', 'delete', 'patch']\n\n/**\n * ESLint rule to force lazy controller import\n */\nexport default createEslintRule({\n  name: 'prefer-lazy-controller-import',\n  defaultOptions: [],\n  meta: {\n    type: 'problem',\n    fixable: 'code',\n    docs: {\n      description: '(Needed for HMR) Prefer lazy controller import over standard import',\n    },\n    schema: [],\n    messages: {\n      preferLazyControllerImport: 'Replace standard import with lazy controller import',\n    },\n  },\n\n  create: function (context) {\n    const importNodes: Record<string, TSESTree.ImportDeclaration> = {}\n    const importIdentifiers: string[] = []\n    let routerIdentifier: string = ''\n\n    function isRouteCallExpression(node: TSESTree.CallExpression, identifier: string) {\n      return (\n        node.callee.type === AST_NODE_TYPES.MemberExpression &&\n        node.callee.object.type === AST_NODE_TYPES.Identifier &&\n        node.callee.object.name === identifier &&\n        node.callee.property.type === AST_NODE_TYPES.Identifier &&\n        HTTP_METHODS.includes(node.callee.property.name)\n      )\n    }\n\n    function isRouteResourceCallExpression(node: TSESTree.CallExpression, identifier: string) {\n      return (\n        node.callee.type === AST_NODE_TYPES.MemberExpression &&\n        node.callee.object.type === AST_NODE_TYPES.Identifier &&\n        node.callee.object.name === identifier &&\n        node.callee.property.type === AST_NODE_TYPES.Identifier &&\n        node.callee.property.name === 'resource'\n      )\n    }\n\n    return {\n      /**\n       * Track all imported identifiers\n       * Also get the local name of the router import\n       */\n      ImportDeclaration(node) {\n        for (const specifier of node.specifiers) {\n          if (specifier.type === 'ImportDefaultSpecifier' || specifier.type === 'ImportSpecifier') {\n            importIdentifiers.push(specifier.local.name)\n            importNodes[specifier.local.name] = node\n          }\n        }\n\n        if (node.source.value === '@adonisjs/core/services/router') {\n          if (node.specifiers[0] && node.specifiers[0].type === 'ImportDefaultSpecifier') {\n            routerIdentifier = node.specifiers[0].local.name\n          }\n        }\n      },\n\n      CallExpression(node) {\n        /**\n         * Check if we are calling router.get() or any other http method\n         * OR if we are calling router.resource that also takes a controller\n         * as an argument\n         *\n         *\n         * Then let's extract the controller identifier from the call expression\n         *\n         * In the case of router.get/post/put.. we have to extract\n         * the first element from the array\n         *\n         * router.get(\"/\", [HomeController, 'index'])\n         */\n        let controller: TSESTree.CallExpressionArgument | null = null\n        if (isRouteCallExpression(node, routerIdentifier)) {\n          const secondArgument = node.arguments[1]\n          if (secondArgument.type === AST_NODE_TYPES.ArrayExpression) {\n            controller = secondArgument.elements[0]\n          }\n        }\n\n        /**\n         * In the case of router.resource, we just have to extract the first argument\n         *\n         * router.resource(\"foo\", UserController)\n         */\n        if (isRouteResourceCallExpression(node, routerIdentifier)) {\n          controller = node.arguments[1]\n        }\n\n        /**\n         * Unable to extract controller\n         */\n        if (!controller) {\n          return\n        }\n\n        /**\n         * If we are dealing with an Identifier that was imported\n         * through a standard import, then report it as an error\n         */\n        if (controller.type !== 'Identifier' || !importIdentifiers.includes(controller.name)) {\n          return\n        }\n\n        context.report({\n          node: importNodes[controller.name],\n          messageId: 'preferLazyControllerImport',\n          fix(fixer) {\n            const importPath = importNodes[controller.name].source.raw\n            const newImportDeclaration = `const ${controller.name} = () => import(${importPath})`\n            return fixer.replaceText(importNodes[controller.name], newImportDeclaration)\n          },\n        })\n      },\n    }\n  },\n})\n","/*\n * @adonisjs/eslint-plugin\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport preferLazyListenerImport from './src/rules/prefer_lazy_listener_import.js'\nimport preferLazyControllerImport from './src/rules/prefer_lazy_controller_import.js'\n\nexport default {\n  rules: {\n    'prefer-lazy-controller-import': preferLazyControllerImport,\n    'prefer-lazy-listener-import': preferLazyListenerImport,\n  },\n}\n"],"mappings":"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","names":["AST_NODE_TYPES","AST_NODE_TYPES"]}