import {
  SessionMiddleware
} from "../chunk-TZLOND27.js";
import "../chunk-OCQGCVXK.js";
import "../chunk-TE5JP3SX.js";
import "../chunk-ZVSEMDIC.js";

// providers/session_provider.ts
import { configProvider } from "@adonisjs/core";
import { RuntimeException } from "@poppinss/utils";
var SessionProvider = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * Registers edge plugin when edge is installed
   * in the user application.
   */
  async registerEdgePlugin() {
    if (this.app.usingEdgeJS) {
      const edge = await import("edge.js");
      const { edgePluginSession } = await import("../src/plugins/edge.js");
      edge.default.use(edgePluginSession);
    }
  }
  /**
   * Registering muddleware
   */
  register() {
    this.app.container.singleton(SessionMiddleware, async (resolver) => {
      const sessionConfigProvider = this.app.config.get("session", {});
      const config = await configProvider.resolve(this.app, sessionConfigProvider);
      if (!config) {
        throw new RuntimeException(
          'Invalid "config/session.ts" file. Make sure you are using the "defineConfig" method'
        );
      }
      const emitter = await resolver.make("emitter");
      return new SessionMiddleware(config, emitter);
    });
  }
  /**
   * Adding edge tags (if edge is installed)
   */
  async boot() {
    await this.registerEdgePlugin();
  }
};
export {
  SessionProvider as default
};
//# sourceMappingURL=session_provider.js.map