{"version":3,"sources":["../index.ts","../src/store.ts","../stubs/main.ts","../configure.ts","../src/define_config.ts","../src/drivers.ts"],"sourcesContent":["/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport * from 'bentocache'\n\nexport { store } from './src/store.js'\nexport { configure } from './configure.js'\nexport { defineConfig } from './src/define_config.js'\nexport { drivers } from './src/drivers.js'\n","/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { bentostore } from 'bentocache'\nimport { configProvider } from '@adonisjs/core'\nimport type { ConfigProvider } from '@adonisjs/core/types'\nimport {\n  RawCommonOptions,\n  CreateDriverResult,\n  L1CacheDriver,\n  CreateBusDriverResult,\n  L2CacheDriver,\n} from 'bentocache/types'\n\n/**\n * Create a new store\n */\nexport function store(options?: RawCommonOptions & { prefix?: string }) {\n  return new Store(options)\n}\n\nexport class Store {\n  #baseOptions: RawCommonOptions & { prefix?: string } = {}\n  #l1?: ConfigProvider<CreateDriverResult<L1CacheDriver>>\n  #l2?: ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  #bus?: ConfigProvider<CreateBusDriverResult>\n\n  constructor(baseOptions: RawCommonOptions & { prefix?: string } = {}) {\n    this.#baseOptions = baseOptions\n  }\n\n  /**\n   * Add a L1 layer to your store. This is usually a memory driver\n   * for fast access purposes.\n   */\n  useL1Layer(driver: ConfigProvider<CreateDriverResult<L1CacheDriver>>) {\n    this.#l1 = driver\n    return this\n  }\n\n  /**\n   * Add a L2 layer to your store. This is usually something\n   * distributed like Redis, DynamoDB, Sql database, etc.\n   */\n  useL2Layer(driver: ConfigProvider<CreateDriverResult<L2CacheDriver>>) {\n    this.#l2 = driver\n    return this\n  }\n\n  /**\n   * Add a bus to your store. It will be used to synchronize L1 layers between\n   * different instances of your application.\n   */\n  useBus(bus: ConfigProvider<CreateBusDriverResult>) {\n    this.#bus = bus\n    return this\n  }\n\n  /**\n   * Create a config provider for the store\n   */\n  entry() {\n    return configProvider.create(async (app) => {\n      const storeInstance = bentostore(this.#baseOptions)\n\n      if (this.#l1) storeInstance.useL1Layer(await this.#l1?.resolver(app))\n      if (this.#l2) storeInstance.useL2Layer(await this.#l2?.resolver(app))\n      if (this.#bus) storeInstance.useBus(await this.#bus?.resolver(app))\n\n      return storeInstance\n    })\n  }\n}\n","/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\nexport const stubsRoot = dirname(fileURLToPath(import.meta.url))\n","/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type Configure from '@adonisjs/core/commands/configure'\n\nimport { stubsRoot } from './stubs/main.js'\n\nconst DRIVERS = ['redis', 'file', 'database', 'dynamodb'] as const\nconst DRIVERS_INFO: {\n  [K in (typeof DRIVERS)[number]]: {\n    envVars?: Record<string, number | string>\n    envValidations?: Record<string, string>\n  }\n} = {\n  file: {},\n  redis: {},\n  database: {},\n  dynamodb: {\n    envValidations: {\n      AWS_ACCESS_KEY_ID: `Env.schema.string()`,\n      AWS_SECRET_ACCESS_KEY: `Env.schema.string()`,\n      AWS_REGION: `Env.schema.string()`,\n      DYNAMODB_ENDPOINT: `Env.schema.string()`,\n    },\n    envVars: {\n      AWS_ACCESS_KEY_ID: '',\n      AWS_SECRET_ACCESS_KEY: '',\n      AWS_REGION: '',\n      DYNAMODB_ENDPOINT: '',\n    },\n  },\n}\n\n/**\n * Configures the package\n */\nexport async function configure(command: Configure) {\n  const driver = await command.prompt.choice(\n    'Select the cache driver you plan to use',\n    ['redis', 'file', 'database', 'dynamodb'],\n    {\n      hint: 'You can always change it later',\n    }\n  )\n\n  const codemods = await command.createCodemods()\n\n  /**\n   * Publish provider\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addProvider('@adonisjs/cache/cache_provider').addCommand('@adonisjs/cache/commands')\n  })\n\n  const { envVars, envValidations } = DRIVERS_INFO[driver]\n\n  /**\n   * Define environment variables\n   */\n  if (envVars) {\n    await codemods.defineEnvVariables(envVars)\n  }\n\n  /**\n   * Define environment validations\n   */\n  if (envValidations) {\n    await codemods.defineEnvValidations({ variables: envValidations })\n  }\n\n  /**\n   * Publish config\n   */\n  await codemods.makeUsingStub(stubsRoot, 'config.stub', { driver: driver })\n}\n","/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Store } from './store.js'\nimport { CacheOptions } from './types.js'\n\n/**\n * Define cache configuration\n */\nexport function defineConfig<KnownCaches extends Record<string, Store>>(\n  config: CacheOptions & {\n    default: keyof KnownCaches\n    stores: KnownCaches\n  }\n) {\n  return config\n}\n","/*\n * @adonisjs/cache\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@adonisjs/redis/redis_provider\" />\n/// <reference types=\"@adonisjs/lucid/database_provider\" />\n\nimport { configProvider } from '@adonisjs/core'\nimport type { RedisConnection } from '@adonisjs/redis'\nimport type { ConfigProvider } from '@adonisjs/core/types'\nimport type { RedisConnections } from '@adonisjs/redis/types'\nimport {\n  MemoryConfig,\n  CreateDriverResult,\n  L1CacheDriver,\n  L2CacheDriver,\n  CreateBusDriverResult,\n  DynamoDBConfig,\n  FileConfig,\n  KyselyConfig,\n  OrchidConfig,\n} from 'bentocache/types'\nimport { RuntimeException } from '@adonisjs/core/exceptions'\n\n/**\n * Different drivers supported by the cache module\n */\nexport const drivers: {\n  memory: (config?: MemoryConfig) => ConfigProvider<CreateDriverResult<L1CacheDriver>>\n  redis: (config: {\n    connectionName?: keyof RedisConnections\n  }) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  redisBus: (config: {\n    connectionName?: keyof RedisConnections\n  }) => ConfigProvider<CreateBusDriverResult>\n  database: (config?: {\n    connectionName?: string\n  }) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  dynamodb: (config: DynamoDBConfig) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  file: (config: FileConfig) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  kysely: (config: KyselyConfig) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n  orchid: (config: OrchidConfig) => ConfigProvider<CreateDriverResult<L2CacheDriver>>\n} = {\n  /**\n   * Redis driver for L2 layer\n   * You must install @adonisjs/redis to use this driver\n   */\n  redis(config) {\n    return configProvider.create(async (app) => {\n      const redis = await app.container.make('redis')\n      const { redisDriver } = await import('bentocache/drivers/redis')\n\n      const redisConnection = redis.connection(config.connectionName) as any as RedisConnection\n      return redisDriver({ connection: redisConnection.ioConnection })\n    })\n  },\n\n  /**\n   * Redis driver for the sync bus\n   * You must install @adonisjs/redis to use this driver\n   */\n  redisBus(config) {\n    return configProvider.create(async (app) => {\n      const redis = await app.container.make('redis')\n      const { redisBusDriver } = await import('bentocache/drivers/redis')\n\n      const redisConnection = redis.connection(config.connectionName) as any as RedisConnection\n      return redisBusDriver({ connection: redisConnection.ioConnection.options })\n    })\n  },\n\n  /**\n   * Memory driver for L1 layer\n   */\n  memory(config) {\n    return configProvider.create(async () => {\n      const { memoryDriver } = await import('bentocache/drivers/memory')\n      return memoryDriver(config)\n    })\n  },\n\n  /**\n   * Database driver for L2 layer\n   * You must install @adonisjs/lucid to use this driver\n   */\n  database(config) {\n    return configProvider.create(async (app) => {\n      const db = await app.container.make('lucid.db')\n      const connectionName = config?.connectionName || db.primaryConnectionName\n      const connection = db.manager.get(connectionName)\n\n      /**\n       * Throw error when mentioned connection is not specified\n       * in the database file\n       */\n      if (!connection) {\n        throw new RuntimeException(\n          `Invalid connection name \"${connectionName}\" referenced by \"config/cache.ts\" file. First register the connection inside \"config/database.ts\" file`\n        )\n      }\n\n      const { knexDriver } = await import('bentocache/drivers/knex')\n      return knexDriver({ connection: db.connection(connectionName).getWriteClient() })\n    })\n  },\n\n  /**\n   * DynamoDB driver for L2 layer\n   * You must install @aws-sdk/client-dynamodb to use this driver\n   */\n  dynamodb(config) {\n    return configProvider.create(async () => {\n      const { dynamoDbDriver } = await import('bentocache/drivers/dynamodb')\n      return dynamoDbDriver(config)\n    })\n  },\n\n  /**\n   * File driver for L2 layer\n   */\n  file(config) {\n    return configProvider.create(async () => {\n      const { fileDriver } = await import('bentocache/drivers/file')\n      return fileDriver(config)\n    })\n  },\n\n  /**\n   * Kysely driver for L2 layer\n   */\n  kysely(config) {\n    return configProvider.create(async () => {\n      const { kyselyDriver } = await import('bentocache/drivers/kysely')\n      return kyselyDriver(config)\n    })\n  },\n\n  /**\n   * Orchid driver for L2 layer\n   */\n  orchid(config) {\n    return configProvider.create(async () => {\n      const { orchidDriver } = await import('bentocache/drivers/orchid')\n      return orchidDriver(config)\n    })\n  },\n}\n"],"mappings":";;;AASA,cAAc;;;ACAd,SAAS,kBAAkB;AAC3B,SAAS,sBAAsB;AAaxB,SAAS,MAAM,SAAkD;AACtE,SAAO,IAAI,MAAM,OAAO;AAC1B;AAEO,IAAM,QAAN,MAAY;AAAA,EACjB,eAAuD,CAAC;AAAA,EACxD;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,cAAsD,CAAC,GAAG;AACpE,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,QAA2D;AACpE,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,QAA2D;AACpE,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,KAA4C;AACjD,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,WAAO,eAAe,OAAO,OAAO,QAAQ;AAC1C,YAAM,gBAAgB,WAAW,KAAK,YAAY;AAElD,UAAI,KAAK,IAAK,eAAc,WAAW,MAAM,KAAK,KAAK,SAAS,GAAG,CAAC;AACpE,UAAI,KAAK,IAAK,eAAc,WAAW,MAAM,KAAK,KAAK,SAAS,GAAG,CAAC;AACpE,UAAI,KAAK,KAAM,eAAc,OAAO,MAAM,KAAK,MAAM,SAAS,GAAG,CAAC;AAElE,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;;;ACrEA,SAAS,eAAe;AACxB,SAAS,qBAAqB;AAEvB,IAAM,YAAY,QAAQ,cAAc,YAAY,GAAG,CAAC;;;ACE/D,IAAM,eAKF;AAAA,EACF,MAAM,CAAC;AAAA,EACP,OAAO,CAAC;AAAA,EACR,UAAU,CAAC;AAAA,EACX,UAAU;AAAA,IACR,gBAAgB;AAAA,MACd,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,YAAY;AAAA,MACZ,mBAAmB;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,MACP,mBAAmB;AAAA,MACnB,uBAAuB;AAAA,MACvB,YAAY;AAAA,MACZ,mBAAmB;AAAA,IACrB;AAAA,EACF;AACF;AAKA,eAAsB,UAAU,SAAoB;AAClD,QAAM,SAAS,MAAM,QAAQ,OAAO;AAAA,IAClC;AAAA,IACA,CAAC,SAAS,QAAQ,YAAY,UAAU;AAAA,IACxC;AAAA,MACE,MAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,QAAQ,eAAe;AAK9C,QAAM,SAAS,aAAa,CAAC,WAAW;AACtC,WAAO,YAAY,gCAAgC,EAAE,WAAW,0BAA0B;AAAA,EAC5F,CAAC;AAED,QAAM,EAAE,SAAS,eAAe,IAAI,aAAa,MAAM;AAKvD,MAAI,SAAS;AACX,UAAM,SAAS,mBAAmB,OAAO;AAAA,EAC3C;AAKA,MAAI,gBAAgB;AAClB,UAAM,SAAS,qBAAqB,EAAE,WAAW,eAAe,CAAC;AAAA,EACnE;AAKA,QAAM,SAAS,cAAc,WAAW,eAAe,EAAE,OAAe,CAAC;AAC3E;;;ACjEO,SAAS,aACd,QAIA;AACA,SAAO;AACT;;;ACVA,SAAS,kBAAAA,uBAAsB;AAe/B,SAAS,wBAAwB;AAK1B,IAAM,UAeT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKF,MAAM,QAAQ;AACZ,WAAOA,gBAAe,OAAO,OAAO,QAAQ;AAC1C,YAAM,QAAQ,MAAM,IAAI,UAAU,KAAK,OAAO;AAC9C,YAAM,EAAE,YAAY,IAAI,MAAM,OAAO,0BAA0B;AAE/D,YAAM,kBAAkB,MAAM,WAAW,OAAO,cAAc;AAC9D,aAAO,YAAY,EAAE,YAAY,gBAAgB,aAAa,CAAC;AAAA,IACjE,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,QAAQ;AACf,WAAOA,gBAAe,OAAO,OAAO,QAAQ;AAC1C,YAAM,QAAQ,MAAM,IAAI,UAAU,KAAK,OAAO;AAC9C,YAAM,EAAE,eAAe,IAAI,MAAM,OAAO,0BAA0B;AAElE,YAAM,kBAAkB,MAAM,WAAW,OAAO,cAAc;AAC9D,aAAO,eAAe,EAAE,YAAY,gBAAgB,aAAa,QAAQ,CAAC;AAAA,IAC5E,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAQ;AACb,WAAOA,gBAAe,OAAO,YAAY;AACvC,YAAM,EAAE,aAAa,IAAI,MAAM,OAAO,2BAA2B;AACjE,aAAO,aAAa,MAAM;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,QAAQ;AACf,WAAOA,gBAAe,OAAO,OAAO,QAAQ;AAC1C,YAAM,KAAK,MAAM,IAAI,UAAU,KAAK,UAAU;AAC9C,YAAM,iBAAiB,QAAQ,kBAAkB,GAAG;AACpD,YAAM,aAAa,GAAG,QAAQ,IAAI,cAAc;AAMhD,UAAI,CAAC,YAAY;AACf,cAAM,IAAI;AAAA,UACR,4BAA4B,cAAc;AAAA,QAC5C;AAAA,MACF;AAEA,YAAM,EAAE,WAAW,IAAI,MAAM,OAAO,yBAAyB;AAC7D,aAAO,WAAW,EAAE,YAAY,GAAG,WAAW,cAAc,EAAE,eAAe,EAAE,CAAC;AAAA,IAClF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,QAAQ;AACf,WAAOA,gBAAe,OAAO,YAAY;AACvC,YAAM,EAAE,eAAe,IAAI,MAAM,OAAO,6BAA6B;AACrE,aAAO,eAAe,MAAM;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,KAAK,QAAQ;AACX,WAAOA,gBAAe,OAAO,YAAY;AACvC,YAAM,EAAE,WAAW,IAAI,MAAM,OAAO,yBAAyB;AAC7D,aAAO,WAAW,MAAM;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAQ;AACb,WAAOA,gBAAe,OAAO,YAAY;AACvC,YAAM,EAAE,aAAa,IAAI,MAAM,OAAO,2BAA2B;AACjE,aAAO,aAAa,MAAM;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,QAAQ;AACb,WAAOA,gBAAe,OAAO,YAAY;AACvC,YAAM,EAAE,aAAa,IAAI,MAAM,OAAO,2BAA2B;AACjE,aAAO,aAAa,MAAM;AAAA,IAC5B,CAAC;AAAA,EACH;AACF;","names":["configProvider"]}