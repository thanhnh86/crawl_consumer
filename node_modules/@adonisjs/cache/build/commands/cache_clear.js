import {
  __decorateClass
} from "../chunk-EUXUH3YW.js";

// commands/cache_clear.ts
import { args, BaseCommand, flags } from "@adonisjs/core/ace";
var CacheClear = class extends BaseCommand {
  static commandName = "cache:clear";
  static description = "Clear the application cache";
  static options = {
    startApp: true
  };
  /**
   * Prompts to take consent when clearing the cache in production
   */
  async #takeProductionConsent() {
    const question = "You are in production environment. Want to continue clearing the cache?";
    try {
      return await this.prompt.confirm(question);
    } catch (error) {
      return false;
    }
  }
  /**
   * Check if the given cache exist
   */
  #cacheExists(cache, cacheName) {
    try {
      cache.use(cacheName);
      return true;
    } catch (error) {
      return false;
    }
  }
  /**
   * Handle command
   */
  async run() {
    const cache = await this.app.container.make("cache.manager");
    this.store = this.store || cache.defaultStoreName;
    if (!this.#cacheExists(cache, this.store)) {
      this.logger.error(
        `"${this.store}" is not a valid cache store. Double check config/cache.ts file`
      );
      this.exitCode = 1;
      return;
    }
    if (this.app.inProduction) {
      const shouldClear = await this.#takeProductionConsent();
      if (!shouldClear) return;
    }
    const cacheHandler = cache.use(this.store);
    if (this.namespace) {
      await cacheHandler.namespace(this.namespace).clear();
      this.logger.success(
        `Cleared namespace "${this.namespace}" for "${this.store}" cache successfully`
      );
    } else {
      await cacheHandler.clear();
      this.logger.success(`Cleared "${this.store}" cache successfully`);
    }
  }
};
__decorateClass([
  args.string({ description: "Define a custom cache store to clear", required: false })
], CacheClear.prototype, "store", 2);
__decorateClass([
  flags.string({ description: "Select a cache namespace to clear", alias: "n" })
], CacheClear.prototype, "namespace", 2);
export {
  CacheClear as default
};
//# sourceMappingURL=cache_clear.js.map