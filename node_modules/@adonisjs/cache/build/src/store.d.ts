import type { ConfigProvider } from '@adonisjs/core/types';
import { RawCommonOptions, CreateDriverResult, L1CacheDriver, CreateBusDriverResult, L2CacheDriver } from 'bentocache/types';
/**
 * Create a new store
 */
export declare function store(options?: RawCommonOptions & {
    prefix?: string;
}): Store;
export declare class Store {
    #private;
    constructor(baseOptions?: RawCommonOptions & {
        prefix?: string;
    });
    /**
     * Add a L1 layer to your store. This is usually a memory driver
     * for fast access purposes.
     */
    useL1Layer(driver: ConfigProvider<CreateDriverResult<L1CacheDriver>>): this;
    /**
     * Add a L2 layer to your store. This is usually something
     * distributed like Redis, DynamoDB, Sql database, etc.
     */
    useL2Layer(driver: ConfigProvider<CreateDriverResult<L2CacheDriver>>): this;
    /**
     * Add a bus to your store. It will be used to synchronize L1 layers between
     * different instances of your application.
     */
    useBus(bus: ConfigProvider<CreateBusDriverResult>): this;
    /**
     * Create a config provider for the store
     */
    entry(): ConfigProvider<{
        "__#116@#private": any;
        useL1Layer(driver: CreateDriverResult<L1CacheDriver>): /*elided*/ any;
        useL2Layer(driver: CreateDriverResult<L2CacheDriver>): /*elided*/ any;
        useBus(bus: CreateBusDriverResult): /*elided*/ any;
        readonly entry: {
            options: RawCommonOptions & {
                prefix?: string;
            };
            l1: CreateDriverResult<L1CacheDriver> | undefined;
            l2: CreateDriverResult<L2CacheDriver> | undefined;
            bus: CreateBusDriverResult | undefined;
        };
    }>;
}
